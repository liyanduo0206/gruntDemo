{
  "name": "grunt-unwrap",
  "description": "the grunt plugin for unwrap",
  "version": "0.0.2",
  "homepage": "https://github.com/aui/grunt-unwrap",
  "author": {
    "name": "aui"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/aui/grunt-unwrap.git"
  },
  "bugs": {
    "url": "https://github.com/aui/grunt-unwrap/issues"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.8.0"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "readme": "# grunt-unwrap\n\n这是一个简单的 CMD 模块解除器，可以将 CMD 格式书写的模块导出不依赖加载器的版本。\n\n[jquery](https://github.com/jquery/jquery/)的源码是按照 AMD 规范书写的模块，这样的好处就是可以很方便自由组合需要的特性。jquery 最终发布的时候通过它私有的`build`脚本来打包最终我们所用到的版本。遗憾的是这个`build`脚本只适用于 jquery 项目本身，并不能通用，于是才有了 grunt-unwrap 这个通用解决方案的诞生，你可以基于 CMD 规范书写模块，然后通过 grunt-unwrap 来组装发布版本。\n\n##\t典型项目\n\n[artDialog v6.0.2](https://github.com/aui/artDialog) 是 grunt-unwrap 的典型项目，artDialog-v6.0.0 曾只有模块化的版本，后来用户强烈要求提供不依赖加载器的版本，于是最终通过 grunt-unwrap 来实现了这个需求，目前 artDialog 通过 grunt-unwrap 来编译其标准版与增强版，具体可见它的[Gruntfile.js](https://github.com/aui/artDialog/blob/master/Gruntfile.js)文件。\n\n##\t安装\n\n首先安装[NodeJS](http://nodejs.org)与[GruntJS](http://gruntjs.com)，然后安装`grunt-unwrap`：\n\n```shell\nnpm install grunt-unwrap --save-dev\n```\n\n##\tsrc\n\n*\t类型：`String` | `Array`\n\n需要打包的目标模块文件（内部依赖会提取并合并）。\n\n##\tdest\n\n*\t类型：`String`\n\n输出路径。\n\n##\toptions\n\n###\toptions.base\n\n*\t类型：`String`\n\n模块基础路径。\n\n示例：\n\n```\nunwrap: {\n    options: {\n        base: './src'\n    },\n    'dialog.js': {\n        src: './src/dialog.js',\n        dest: './dist/dialog.js'\n    }\n}\n```\n\n###\toptions.globalBase\n\n*\t类型：`String`\n\n**全局**模块基础路径。\n\n例如模块中使用了``require('jquery')``，会最终合并`options.globalBase + '/jquery.js'`文件。你可以新建`jquery.js`来代替`jquery`模块：\n\n```\ndefine(function () {\n\treturn jQuery;\n});\n```\n\n###\toptions.namespace\n\n*\t类型：`String`\n\n导出的命名空间。一般设置为`'window'`或者`'jQuery'`。\n\n###\toptions.name\n\n*\t类型：`String`\n\n导出的名称。\n\n###\toptions.banner\n\n*\t类型：`String`\n\n导出的代码头部注释信息。\n\n##\t示例\n\n```\nmodule.exports = function (grunt) {\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n        meta: {\n            banner: '/*! <%= pkg.name %> v<%= pkg.version %> | <%= pkg.homepage %> */\\n'\n        },\n        unwrap: {\n            options: {\n                base: './src',\n                globalBase: './src/global_modules',\n                name: 'dialog',\n                namespace: 'window',\n                banner: '<%= meta.banner %>'\n            },\n            'dialog.js': {\n                src: './src/dialog.js',\n                dest: './dist/dialog.js'\n            },\n            'dialog-plus.js': {\n                src: './src/dialog-plus.js',\n                dest: './dist/dialog-plus.js'\n            }\n        }\n    });\n    grunt.loadNpmTasks('grunt-unwrap');\n    grunt.registerTask('default', ['unwrap']);\n};\n\n```\n\n最终`dialog.js`与`dialog-plus.js`会在全局暴露`dialog`这个变量让开发者调用。\n\n##\t注意事项\n\n1. 请不要给模块命名 ID，转换器会自动添加 ID\n2. 模块内部的注释请不要包含`require`，否则可能会误分析\n\n>\t未来可能会借助词法分析的库来安全的解决第二个问题。\n\n## License\n\nThe MIT license.",
  "readmeFilename": "README.md",
  "_id": "grunt-unwrap@0.0.2",
  "_from": "grunt-unwrap@*"
}
